blueprint:
  name: Light or Switch Control by Door Sensor v1.0
  description: >
    Turns a light or switch ON when the door opens (after optional delay),
    and OFF when the door closes (after optional delay).
  domain: automation
  input:
    door_sensor:
      name: Door Sensor
      description: A binary sensor that reports 'on' when open and 'off' when closed.
      selector:
        entity:
          domain: binary_sensor

    target_entity:
      name: Light or Switch
      description: The light or switch to control.
      selector:
        entity:
          filter:
            - domain: light
            - domain: switch

    delay_on_seconds:
      name: Delay Before Turning On
      description: Seconds to wait after the door opens before turning on.
      default: 0
      selector:
        number:
          min: 0
          max: 300
          step: 1
          mode: slider
          unit_of_measurement: seconds

    delay_off_seconds:
      name: Delay Before Turning Off
      description: Seconds to wait after the door closes before turning off.
      default: 0
      selector:
        number:
          min: 0
          max: 300
          step: 1
          mode: slider
          unit_of_measurement: seconds

trigger:
  - platform: state
    entity_id: !input door_sensor
    from: 'off'
    to: 'on'
  - platform: state
    entity_id: !input door_sensor
    from: 'on'
    to: 'off'

action:
  - variables:
      entity: !input target_entity
      domain: "{{ entity.split('.')[0] }}"
      new_state: "{{ trigger.to_state.state }}"
      delay_on: !input delay_on_seconds
      delay_off: !input delay_off_seconds

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ new_state == 'on' }}"
        sequence:
          - wait_for_trigger:
              - platform: state
                entity_id: !input door_sensor
                to: 'off'
            timeout: "{{ delay_on | int }}"
          - condition: template
            value_template: "{{ not wait.trigger }}"
          - service: "{{ domain }}.turn_on"
            target:
              entity_id: "{{ entity }}"

      - conditions:
          - condition: template
            value_template: "{{ new_state == 'off' }}"
        sequence:
          - wait_for_trigger:
              - platform: state
                entity_id: !input door_sensor
                to: 'on'
            timeout: "{{ delay_off | int }}"
          - condition: template
            value_template: "{{ not wait.trigger }}"
          - service: "{{ domain }}.turn_off"
            target:
              entity_id: "{{ entity }}"

mode: restart
